const images=Array.from(Array(12).keys()),boardOuter=document.querySelector(".board"),board=document.querySelector(".board__inner"),replay=document.querySelector(".game-status__replay"),boardSize=document.querySelector(".game-status__size");class Game{constructor(){this.gameSize=4,board.addEventListener("click",this._cardClick.bind(this)),replay.addEventListener("click",this._initGame.bind(this)),this._initGame()}_initGame(){boardOuter.classList.remove("game-over");const e=Number(boardSize.value);e<4?(boardSize.value=4,this.gameSize=4):e>12?(boardSize.value=12,this.gameSize=12):this.gameSize=e,this.cardList=Array.from(Array(this.gameSize).keys()),this.cards=[...this.cardList,...this.cardList].sort(((e,s)=>Math.random()-.5)),this.moves=[],this.matches=0,board.innerHTML="",this.cards.forEach(((e,s)=>{const t=document.createElement("div");t.classList.add("card"),t.dataset.card=s,t.innerHTML=`\n          <div class="card__inner">\n            <div class="card__back"></div>\n            <div class="card__front">\n                <img src="images/bird_Bird${images[e]+1}.png" />\n            </div>\n          </div>`,board.append(t)})),console.log(this.cards)}_cardClick(e){const s=e.target.closest(".card"),t=s.dataset.card;if(!(this.moves.find((e=>e===t))||this.moves.length>=2||s.classList.contains("matched")))return this.moves.push(t),s.classList.add("flipped"),this.moves.length>=2?this._checkMatch():void 0}_resetFlipped(e){e.forEach((e=>e.classList.remove("flipped"))),this.moves=[]}_endGame(){console.log(this.matches,this.gameSize),this.matches<this.gameSize||boardOuter.classList.add("game-over")}_checkMatch(){const[e,s]=this.moves,t=document.querySelectorAll(".card");if(this.cards[e]===this.cards[s])return this.matches++,t[e].classList.add("matched"),t[s].classList.add("matched"),this._resetFlipped(t),this._endGame();setTimeout((()=>this._resetFlipped(t)),2e3)}}const game=new Game;